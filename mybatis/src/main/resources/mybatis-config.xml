<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <properties resource="config.properties">
    	<!-- 开启默认值表示，如果value是其他的值，则表示分隔符":"变成了value值的表示 -->
    	<property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        <property name="username" value="DINGJUN"/>
    </properties>
    <settings>
        <setting name="cacheEnabled" value="false"/>
        <setting name="lazyLoadingEnabled" value="false"/>
    </settings>
    <typeAliases>
        <typeAlias type="com.chinatvpay.bean.User_tb" alias="user_tb"/>
        <typeAlias type="com.chinatvpay.bean.User" alias="user"/>
    </typeAliases>
    <typeHandlers>
    	<typeHandler handler="com.chinatvpay.type.hander.MyTypeHandler"/>
    </typeHandlers>
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${driver}" />
                <property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
                <property name="username" value="${username}" />
                <property name="password" value="r696697" />
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="UserMapper.xml" />
    </mappers>
</configuration>


<!-- 官方地址：http://www.mybatis.org/mybatis-3/zh/configuration.html -->
<!-- XML 配置
configuration 配置
    -properties 属性
    -settings 设置
    -typeAliases 类型别名
    -typeHandlers 类型处理器
    -objectFactory 对象工厂
    -plugins 插件
    -environments 环境
        -environment 环境变量
            -transactionManager 事物管理器
            -dataSource 数据源
    -databaseIdProvider 数据库厂商标识
    -mappers 映射器

==============================================================================   
==================================properties==================================
一些属性都是外部配置且可动态替换的，既可以在典型的java属性文件中配置，
也就是在properties文件中配置，也可通过properties元素的子元素来传递，就像下面例子演示的。
mybatis-config.xml文件中的一个元素，引用了一个外部资源文件

<properties resource="org/mybatis/example/config.properties">
  <property name="username" value="dev_user"/>
  <property name="password" value="F2Fa3!33TYyg"/>
</properties>

这里的属性是可以在整个配置文件中用来替换需要动态配置的属性值的。

<dataSource type="POOLED">
  <property name="driver" value="${driver}"/>
  <property name="url" value="${url}"/>
  <property name="username" value="${username}"/>
  <property name="password" value="${password}"/>
</dataSource>

其中的username和password将会由properties元素中定义的相应值替换。
而dirver和url属性将会有config.properties文件中对应的值来替换。
需要注意的是，同一个属性值多个地方配置的问题，答案就在下方。

上面的属于配置文件中properties文件的使用，当然也可以通过代码的方式使用配置文件，
也就是属性文件也可以直接通过流的方式被传到SQLSessionFactoryBuilder.build()方法中。
SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);
或者
SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);
也就是将读取的properties文件流直接传给session工厂构造。当然，配置的key值需要和节点元素相同。

如果一个配置文件不知在一个地方进行了配置，那么MyBatis将按照下面的顺序来加载：
>在 properties 元素体内指定的属性首先被读取。
>然后根据 properties元素中的 resource属性读取类路径下属性文件或根据 url属性指定的路径读取属性文件，并覆盖已读取的同名属性。
>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。

也就是，通过方法参数传递的属性具有最高优先级（也就是代码中书写的等级最高），
resource/url属性中指定的配置文件次之，最低优先级的是properties属性中指定的属性。

从 3.4.2开始，还可以为占位符指定一个默认值。
<dataSource type="POOLED">
  <property name="username" value="${username:ut_user}"/>
</dataSource>
ut_user就是传说中的默认值（注意这里的分隔符），不过这个功能并不是默认开启的，需要在properties元素中开启一下。
<properties resource="org/mybatis/example/config.properties">
  <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
</properties>
其实分隔符是可以自定义的，也很简单就是开启的时候指定。
<properties resource="org/mybatis/example/config.properties">
  <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>
</properties>



============================================================================
==================================settings==================================
这是MyBatis中非常重要的调整设置，它会改变MyBatis的运行时行为。
设置参数                                                                           描述  >> 有效值 >> 默认值
cacheEnabled                        全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。  >> true | false >> true
lazyLoadingEnabled                  延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。  >> true | false  >> false
aggressiveLazyLoading               当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载（参考lazyLoadTriggerMethods).  >> true | false  >> false (true in ≤3.4.1)
multipleResultSetsEnabled           是否允许单一语句返回多结果集（需要兼容驱动）。  >> true | false  >> true
useColumnLabel                      使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。  >> true | false  >> true
useGeneratedKeys                    允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。  >> true | false  >> False
autoMappingBehavior                 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。  >>  NONE, PARTIAL, FULL   >> PARTIAL
autoMappingUnknownColumnBehavior    指定发现自动映射目标未知列（或者未知属性类型）的行为。
                                    NONE: 不做任何反应
                                    WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
                                    FAILING: 映射失败 (抛出 SqlSessionException)
                                    >> NONE, WARNING, FAILING   >>  NONE
defaultExecutorType                 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。  >>  SIMPLE REUSE BATCH   >>  SIMPLE
defaultStatementTimeout             设置超时时间，它决定驱动等待数据库响应的秒数。 任意正整数   Not Set (null)
defaultFetchSize                    为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。  >> 任意正整数    >>   Not Set (null)
safeRowBoundsEnabled                允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。   >>    true | false    >>   False
safeResultHandlerEnabled            允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。    >>   true | false    >>   True
mapUnderscoreToCamelCase            是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。   >>   true | false    >>   False
localCacheScope                     MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  >>  SESSION | STATEMENT   >>  SESSION
jdbcTypeForNull                     当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。   JdbcType 常量.  >>  大多都为: NULL, VARCHAR and OTHER   >>  OTHER
lazyLoadTriggerMethods              指定哪个对象的方法触发一次延迟加载。  >>   用逗号分隔的方法列表。  >>  equals,clone,hashCode,toString
defaultScriptingLanguage            指定动态 SQL 生成的默认语言。    >>  一个类型别名或完全限定类名。  >>   org.apache.ibatis.scripting.xmltags.XMLLanguageDriver
defaultEnumTypeHandler              指定 Enum 使用的默认 TypeHandler 。 (从3.4.5开始)   >>  一个类型别名或完全限定类名。  >>   org.apache.ibatis.type.EnumTypeHandler
callSettersOnNulls                  指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。   >>    true | false    >>   false
returnInstanceForEmptyRow           当返回行的所有列都是空时，MyBatis默认返回null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）   >>   true | false    >>   false
logPrefix                           指定 MyBatis 增加到日志名称的前缀。  >>   任何字符串    >>   Not set
logImpl                             指定 MyBatis 所用日志的具体实现，未指定时将自动查找。  >>  SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING    >>   Not set
proxyFactory                        指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。   CGLIB | JAVASSIST   JAVASSIST (MyBatis 3.3 or above)
vfsImpl                             指定VFS的实现     >>  自定义VFS的实现的类全限定名，以逗号分隔。  >>   Not set
useActualParamName                  允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的工程必须采用Java 8编译，并且加上-parameters选项。（从3.4.1开始）  >>  true | false    >>   true
configurationFactory                指定一个提供Configuration实例的类。 这个被返回的Configuration实例用来加载被反序列化对象的懒加载属性值。 这个类必须包含一个签名方法static Configuration getConfiguration(). (从 3.2.3 版本开始)   >>  类型别名或者全类名.  >>  Not set

完整的settings元素配置
<settings>
  <setting name="cacheEnabled" value="true"/>
  <setting name="lazyLoadingEnabled" value="true"/>
  <setting name="multipleResultSetsEnabled" value="true"/>
  <setting name="useColumnLabel" value="true"/>
  <setting name="useGeneratedKeys" value="false"/>
  <setting name="autoMappingBehavior" value="PARTIAL"/>
  <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
  <setting name="defaultExecutorType" value="SIMPLE"/>
  <setting name="defaultStatementTimeout" value="25"/>
  <setting name="defaultFetchSize" value="100"/>
  <setting name="safeRowBoundsEnabled" value="false"/>
  <setting name="mapUnderscoreToCamelCase" value="false"/>
  <setting name="localCacheScope" value="SESSION"/>
  <setting name="jdbcTypeForNull" value="OTHER"/>
  <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
</settings>



===============================================================================
==================================typeAliases==================================
类别名是为java类型设置一个短的名字。它只和XML配置有关，存在的意义仅在于用来减少类完全限定名的冗余。
<typeAliases>
  <typeAlias alias="Author" type="domain.blog.Author"/>
  <typeAlias alias="Dingjun" type="domain.blog.Dingjun"/>
  <typeAlias alias="Comment" type="domain.blog.Comment"/>
  <typeAlias alias="Post" type="domain.blog.Post"/>
  <typeAlias alias="Section" type="domain.blog.Section"/>
  <typeAlias alias="Tag" type="domain.blog.Tag"/>
</typeAliases>
这样配置之后，Dingjun可以用在任何使用domain.blog.Dingjun的地方。
也可以指定一个报名，它会在包名下面搜索需要的javabean。
<typeAliases>
  <package name="domain.blog"/>
</typeAliases>
每一个在domain.blog中的java bean，在没有注解的情况下，会使用bean的首字母小写的非限定类名作为它的别名。
domain.blog.Dingjun的别名就是dingjun，如果有注解的话，就是注解中指定的值。
@Alias("dingjun")
public class Dingjun {
    // TODO
}

常见的java类型内建的相应的类型别名。对大小写是不敏感的，需要注意的是由基本类型名称重复导致的特殊处理。
别名                      映射的类型
_byte       byte
_long       long
_short      short
_int        int
_integer    int
_double     double
_float      float
_boolean    boolean
string      String
byte        Byte
long        Long
short       Short
int         Integer
integer     Integer
double      Double
float       Float
boolean     Boolean
date        Date
decimal     BigDecimal
bigdecimal  BigDecimal
object      Object
map         Map
hashmap     HashMap
list        List
arraylist   ArrayList
collection  Collection
iterator    Iterator



================================================================================
==================================typeHandlers==================================
无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 
都会用类型处理器将获取的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。

类型处理器                                                   Java 类型                                                  JDBC 类型
BooleanTypeHandler          java.lang.Boolean, boolean  数据库兼容的 BOOLEAN
ByteTypeHandler             java.lang.Byte, byte        数据库兼容的 NUMERIC 或 BYTE
ShortTypeHandler            java.lang.Short, short      数据库兼容的 NUMERIC 或 SHORT INTEGER
IntegerTypeHandler          java.lang.Integer, int      数据库兼容的 NUMERIC 或 INTEGER
LongTypeHandler             java.lang.Long, long        数据库兼容的 NUMERIC 或 LONG INTEGER
FloatTypeHandler            java.lang.Float, float      数据库兼容的 NUMERIC 或 FLOAT
DoubleTypeHandler           java.lang.Double, double    数据库兼容的 NUMERIC 或 DOUBLE
BigDecimalTypeHandler       java.math.BigDecimal        数据库兼容的 NUMERIC 或 DECIMAL
StringTypeHandler           java.lang.String            CHAR, VARCHAR
ClobReaderTypeHandler       java.io.Reader              -
ClobTypeHandler             java.lang.String            CLOB, LONGVARCHAR
NStringTypeHandler          java.lang.String            NVARCHAR, NCHAR
NClobTypeHandler            java.lang.String            NCLOB
BlobInputStreamTypeHandler  java.io.InputStream         -
ByteArrayTypeHandler        byte[]                      数据库兼容的字节流类型
BlobTypeHandler             byte[]                      BLOB, LONGVARBINARY
DateTypeHandler             java.util.Date              TIMESTAMP
DateOnlyTypeHandler         java.util.Date              DATE
TimeOnlyTypeHandler         java.util.Date              TIME
SqlTimestampTypeHandler     java.sql.Timestamp          TIMESTAMP
SqlDateTypeHandler          java.sql.Date               DATE
SqlTimeTypeHandler          java.sql.Time               TIME
ObjectTypeHandler           Any                         OTHER 或未指定类型
EnumTypeHandler             Enumeration Type            VARCHAR-任何兼容的字符串类型，存储枚举的名称（而不是索引）
EnumOrdinalTypeHandler      Enumeration Type            任何兼容的 NUMERIC 或 DOUBLE 类型，存储枚举的索引（而不是名称）。
InstantTypeHandler          java.time.Instant           TIMESTAMP
LocalDateTimeTypeHandler    java.time.LocalDateTime     TIMESTAMP
LocalDateTypeHandler        java.time.LocalDate         DATE
LocalTimeTypeHandler        java.time.LocalTime         TIME
OffsetDateTimeTypeHandler   java.time.OffsetDateTime    TIMESTAMP
OffsetTimeTypeHandler       java.time.OffsetTime        TIME
ZonedDateTimeTypeHandler    java.time.ZonedDateTime     TIMESTAMP
YearTypeHandler             java.time.Year              INTEGER
MonthTypeHandler            java.time.Month             INTEGER
YearMonthTypeHandler        java.time.YearMonth         VARCHAR or LONGVARCHAR
JapaneseDateTypeHandler     java.time.chrono.JapaneseDate   DATE

我们可以重写类型处理器或者创建自己的类型处理器来处理不支持的或非标准的类型。
通过实现org.apache.ibatis.type.TypeHandler接口，或者继承一个很便利的类org.apache.ibatis.type.BaseTypeHandler，
然后可选择性的映射到一个JDBC类型。如下：
@MappedJdbcTypes(JdbcType.VARCHAR)
public class ExampleTypeHandler extends BaseTypeHandler<String> {

  @Override
  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {
    ps.setString(i, parameter);
  }

  @Override
  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {
    return rs.getString(columnName);
  }

  @Override
  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
    return rs.getString(columnIndex);
  }

  @Override
  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
    return cs.getString(columnIndex);
  }
}
然后再这个配置文件中配置这个类型处理器即可：
<typeHandlers>
  <typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>
</typeHandlers>
使用这个类型处理器会覆盖已经存在的处理Java的String类型属性和VARCHAR参数及结果的类型处理器。
mybatis不会窥探数据库元信息来决定使用哪种类型，所以我们必须在参数和结果映射中指明那是CARCHAR类型的字段，以使其能够绑定到正确的类型处理器上。因为mybatis知道语句执行才清楚数据类型。

通过类型处理器的泛型，mybatis可以得知类型处理器处理的Java类型，不过这种行为可以通过两种方法改变：
>在类型处理器的配置元素上增加一个javaType属性（如：javaType="String"）
>在类型处理器的类上增加一个@MappedTypes注解来指定与其关联的Java类型列表。如果这两种同时指定，注解不起作用。

可以通过两种方式来指定被关联的JDBC类型：
>在类型处理器的配置元素上增加一个jdbcType属性（如：jdbcType="VARCHAR"）
>在类型处理器的类上增加一个@MappedJdbcTypes注解来指定与其关联的JDBC类型列表。如果这两种同时指定，注解不起作用。

当决定在ResultMap中使用某一TypeHandler时，此时java类型是已知的（从结果类型中获得），但是JDBC类型是未知的。
因此mybatis使用 javaType=[TheJavaType],jdbcType=null 的组合来选择一个TypeHandler。这意味着使用@MappedJdbcTypes注解可以限制TypeHandler的范围，
同时除非显示的设置，否则TypeHandler在ResultMap中将是无效的。如果希望ResultMap中使用TypeHandler，那么设置@MappedJdbcTypes注解的includeNullJdbcType=true即可。
然而在从3.4.0开始，如果只有一个注册的TypeHandler来处理Java类型，那么它将是ResultMap使用java类型时的默认值（即使没有includeNullJdbcType=true）。

也可以让mybatis为我们查找类型处理器：
<typeHandlers>
  <package name="org.mybatis.example"/>
</typeHandlers>
需要注意的是：使用自动检索功能的时候，只能通过注解的方式来指定JDBC的类型。

你可以创建一个能够处理多个类的泛型类型处理器。为了使用泛型类型处理器，需要增加一个接受该类的class作为参数的构造器，这样在构造一个类型处理器的时候Mybatis就会穿入一个具体的类。
//GenericTypeHandler.java
public class GenericTypeHandler<E extends MyObject> extends BaseTypeHandler<E> {//这个地方好别扭，看不懂

  private Class<E> type;

  public GenericTypeHandler(Class<E> type) {
    if (type == null) throw new IllegalArgumentException("Type argument cannot be null");
    this.type = type;
  }
  ...

EnmuTypeHandler和EnumOrdinalTypeHandler都是泛型处理器

处理枚举类型
如果想要映射枚举类型，就需要在上面的两个处理器中选择一个来使用。
如果我们想存储取近似值时用到的舍入模式。默认情况下，Mybatis会利用EnmuTypeHandler来吧Enum值转换成对应的名字。
注意：EnmuTypeHandler在某种意义上来说是比较特别的，其他的处理器只针对某个特定的类，而它处理任意继承了Enum的类。
不过我们肯定不是想存储名字，相反我们的DBA会坚持使用整形代码。那样也是轻而易举的：在配置文件中把EnumOrdinalTypeHandler加到typeHandlers中即可，这样每个RoundingMode将通过他们的序数值来映射成对应的整型。
<typeHandlers>
  <typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="java.math.RoundingMode"/>
</typeHandlers>

但是怎样能将同样的Enum即映射成字符串又映射成整型？
自动映射器（atuo-mapper）会自动的选用EnumOrdinalTypeHandler来处理，所以如果我们想用普通的EnmuTypeHandler，就必须要显示的为那些SQL语句设置要使用的类型处理器。
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.apache.ibatis.submitted.rounding.Mapper">
	<resultMap type="org.apache.ibatis.submitted.rounding.User" id="usermap">
		<id column="id" property="id"/>
		<result column="name" property="name"/>
		<result column="funkyNumber" property="funkyNumber"/>
		<result column="roundingMode" property="roundingMode"/>
	</resultMap>

	<select id="getUser" resultMap="usermap">
		select * from users
	</select>
	<insert id="insert">
	    insert into users (id, name, funkyNumber, roundingMode) values (
	    	#{id}, #{name}, #{funkyNumber}, #{roundingMode}
	    )
	</insert>
	
	<resultMap type="org.apache.ibatis.submitted.rounding.User" id="usermap2">
		<id column="id" property="id"/>
		<result column="name" property="name"/>
		<result column="funkyNumber" property="funkyNumber"/>
		<result column="roundingMode" property="roundingMode" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>
	</resultMap>
	<select id="getUser2" resultMap="usermap2">
		select * from users2
	</select>
	<insert id="insert2">
	    insert into users2 (id, name, funkyNumber, roundingMode) values (
	    	#{id}, #{name}, #{funkyNumber}, #{roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler}
	    )
	</insert>

</mapper>

注意：这里的select语句强制使用resultMap来代替resultType。




================================================================================
==================================objectFactory==================================
MyBatis每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认的构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。
如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂实现，如下：
// ExampleObjectFactory.java
public class ExampleObjectFactory extends DefaultObjectFactory {
  public Object create(Class type) {
    return super.create(type);
  }
  public Object create(Class type, List<Class> constructorArgTypes, List<Object> constructorArgs) {
    return super.create(type, constructorArgTypes, constructorArgs);
  }
  public void setProperties(Properties properties) {
    super.setProperties(properties);
  }
  public <T> boolean isCollection(Class<T> type) {
    return Collection.class.isAssignableFrom(type);
  }}

然後在配置文件中配置自定義的工廠即可
<objectFactory type="org.mybatis.example.ExampleObjectFactory">
  <property name="someProperty" value="100"/>
</objectFactory>

ObjectFactory接口簡單，它包含兩個創建用的方法，一個是處理默認構造方法的，另外一個是處理帶參數的構造方法的。最後，setProperties方法可以被用來配置ObjectFactory，在初始化你的ObjectFactory實例后，
objectFactory元素体中定义的属性会被传递给setProperties方法。



================================================================================
==================================plugins=======================================
MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：

Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
ParameterHandler (getParameterObject, setParameters)
ResultSetHandler (handleResultSets, handleOutputParameters)
StatementHandler (prepare, parameterize, batch, update, query)

这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为如果在试图修改或重写已有方法的行为的时候，你很可能在破坏 MyBatis 的核心模块。 这些都是更低层的类和方法，所以使用插件的时候要特别当心。
通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。
// ExamplePlugin.java
@Intercepts({@Signature(
  type= Executor.class,
  method = "update",
  args = {MappedStatement.class,Object.class})})
public class ExamplePlugin implements Interceptor {
  public Object intercept(Invocation invocation) throws Throwable {
    return invocation.proceed();
  }
  public Object plugin(Object target) {
    return Plugin.wrap(target, this);
  }
  public void setProperties(Properties properties) {
  }
}

然后在mybatis的配置文件中配置即可：
<plugins>
  <plugin interceptor="org.mybatis.example.ExamplePlugin">
    <property name="someProperty" value="100"/>
  </plugin>
</plugins>

上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用， 这里的 Executor 是负责执行低层映射语句的内部对象。
除了用插件来修改 MyBatis 核心行为之外，还可以通过完全覆盖配置类来达到目的。只需继承后覆盖其中的每个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可。再次重申，这可能会严重影响 MyBatis 的行为，务请慎之又慎。



=====================================================================================
==================================environments=======================================
mybatis可以配置成适应多种环境，这种机制有助于将SQL映射应用于多种数据库之中，现实情况下有多种理由需要这么做。如，开发，测试和生产环境需要有不同的配置；或者共享相同的Schema的多个生产数据库，想使用相同的sql映射。
不过要记住：尽管可以配置多个环境，每个SQLSessionFactory实例只能选择其一。
所以，如果需要连接两个数据库，就需要创建两个SQLSessionFactory实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，以此类推：
每个数据库对应一个SqlSessionFactory实例。
为了指定创建哪种环境，只要将它作为可选参数传递给SQLSessionFactoryBuilder即可。可以接受环境配置的两个方法签名是：

SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);
SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);

如果忽略了环境参数，那么默认环境将会被加载，如下所示：

SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);
SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, properties);

环境元素定义了如何配置环境。
<environments default="development">
  <environment id="development">
    <transactionManager type="JDBC">
      <property name="..." value="..."/>
    </transactionManager>
    <dataSource type="POOLED">
      <property name="driver" value="${driver}"/>
      <property name="url" value="${url}"/>
      <property name="username" value="${username}"/>
      <property name="password" value="${password}"/>
    </dataSource>
  </environment>
</environments>

注意这里的关键点：
>默认的环境ID（比如：default="development"）
>每个environment元素定义的环境（如：id="development"）
>事物管理器的配置（如：type="JDBC"）
>数据源的配置（如：type="POOLED"）
默认的环境和环境ID是自解释的，因此一目了然。可以对环境任意命名，但是一定要保证默认的环境ID要匹配其中一个环境ID。

事物管理器（transactionManager）
在MyBatis中有两种类型的事物管理器（也就是 type="[JDBC|MANAGED]"）：
=JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
=MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。例如:
<transactionManager type="MANAGED">
  <property name="closeConnection" value="false"/>
</transactionManager>

如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。
这两种事务管理器类型都不需要任何属性。它们不过是类型别名，换句话说，你可以使用 TransactionFactory 接口的实现类的完全限定名或类型别名代替它们。
public interface TransactionFactory {
  void setProperties(Properties props);  
  Transaction newTransaction(Connection conn);
  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);  
}

任何在 XML 中配置的属性在实例化之后将会被传递给 setProperties() 方法。你也需要创建一个 Transaction 接口的实现类，这个接口也很简单：
public interface Transaction {
  Connection getConnection() throws SQLException;
  void commit() throws SQLException;
  void rollback() throws SQLException;
  void close() throws SQLException;
  Integer getTimeout() throws SQLException;
}
使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。

数据源（dataSource）
dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。
许多 MyBatis 的应用程序会按示例中的例子来配置数据源。虽然这是可选的，但为了使用延迟加载，数据源是必须配置的。

有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：
UNPOOLED– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。 不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：
driver – 这是 JDBC 驱动的 Java 类的完全限定名（并不是 JDBC 驱动中可能包含的数据源类）。
url – 这是数据库的 JDBC URL 地址。
username – 登录数据库的用户名。
password – 登录数据库的密码。
defaultTransactionIsolationLevel – 默认的连接事务隔离级别。
作为可选项，你也可以传递属性给数据库驱动。要这样做，属性的前缀为“driver.”，例如：
driver.encoding=UTF8
这将通过 DriverManager.getConnection(url,driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。

POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。
除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：
poolMaximumActiveConnections – 在任意时间可以存在的活动（也就是正在使用）连接数量，默认值：10
poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。
poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）
poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败），默认值：20000 毫秒（即 20 秒）。
poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程. 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3 (新增于 3.4.5)
poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动失败时带有一个恰当的错误消息。
poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。
poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。

JNDI – 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。这种数据源配置只需要两个属性：
initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么 data_source 属性将会直接从 InitialContext 中寻找。
data_source – 这是引用数据源实例位置的上下文的路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。
和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给初始上下文。比如：
env.encoding=UTF8
这就会在初始上下文（InitialContext）实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。

你可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源：
public interface DataSourceFactory {
  void setProperties(Properties props);
  DataSource getDataSource();
}

org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：
import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;
import com.mchange.v2.c3p0.ComboPooledDataSource;
        
public class C3P0DataSourceFactory extends UnpooledDataSourceFactory {

  public C3P0DataSourceFactory() {
    this.dataSource = new ComboPooledDataSource();
  }
}

为了令其工作，记得为每个希望 MyBatis 调用的 setter 方法在配置文件中增加对应的属性。下面是一个可以连接至 PostgreSQL 数据库的例子：
<dataSource type="org.myproject.C3P0DataSourceFactory">
  <property name="driver" value="org.postgresql.Driver"/>
  <property name="url" value="jdbc:postgresql:mydb"/>
  <property name="username" value="postgres"/>
  <property name="password" value="root"/>
</dataSource>




===========================================================================================
==================================databaseIdProvider=======================================
MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。 MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。 为支持多厂商特性只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可：
<databaseIdProvider type="DB_VENDOR" />

这里的 DB_VENDOR 会通过 DatabaseMetaData#getDatabaseProductName() 返回的字符串进行设置。 由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短，如下：
<databaseIdProvider type="DB_VENDOR">
  <property name="SQL Server" value="sqlserver"/>
  <property name="DB2" value="db2"/>        
  <property name="Oracle" value="oracle" />
</databaseIdProvider>

在提供了属性别名时，DB_VENDOR databaseIdProvider 将被设置为第一个能匹配数据库产品名称的属性键对应的值，如果没有匹配的属性将会设置为 “null”。 在这个例子中，如果 getDatabaseProductName() 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。
你可以通过实现接口 org.apache.ibatis.mapping.DatabaseIdProvider 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：
public interface DatabaseIdProvider {
  void setProperties(Properties p);
  String getDatabaseId(DataSource dataSource) throws SQLException;
}




===========================================================================================
==================================mappers==================================================
既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要定义 SQL 映射语句了。但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。 Java 在自动查找这方面没有提供一个很好的方法，
所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 file:/// 的 URL），或类名和包名等。例如：

// 使用相对于类路径的资源引用
<mappers>
  <mapper resource="org/mybatis/builder/AuthorMapper.xml"/>
  <mapper resource="org/mybatis/builder/BlogMapper.xml"/>
  <mapper resource="org/mybatis/builder/PostMapper.xml"/>
</mappers>

// 使用完全限定资源定位符（URL）
<mappers>
  <mapper url="file:///var/mappers/AuthorMapper.xml"/>
  <mapper url="file:///var/mappers/BlogMapper.xml"/>
  <mapper url="file:///var/mappers/PostMapper.xml"/>
</mappers>

// 使用映射器接口实现类的完全限定类名
<mappers>
  <mapper class="org.mybatis.builder.AuthorMapper"/>
  <mapper class="org.mybatis.builder.BlogMapper"/>
  <mapper class="org.mybatis.builder.PostMapper"/>
</mappers>

// 将包内的映射器接口实现全部注册为映射器
<mappers>
  <package name="org.mybatis.builder"/>
</mappers>

属性                       描述
id          当前命名空间中的一个唯一标识，用于标识一个result map.
type        类的完全限定名, 或者一个类型别名 (内置的别名可以参考上面的表格).
autoMapping 如果设置这个属性，MyBatis将会为这个ResultMap开启或者关闭自动映射。这个属性会覆盖全局的属性 autoMappingBehavior。默认值为：unset。


























 -->
  
 
 
 