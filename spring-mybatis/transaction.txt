第四章 事务

一个使用MyBatis-Spring的主要原因是它允许MyBatis参与到Spring的事物管理中。而不是给MyBatis创建一个新的特定的事物管理器，
MyBatis-Spring利用了存在于Spring中的DataSourceTransactionManager。

一旦Spring的PlatformTransactionManager配置好了，你可以在Spring中以你通常的做法来配置事务。
@Transactional注解和AOP样式的配置都是支持的。在事物处理期间，一个单独的SqlSession对象将会被创建和使用。当事务完成时，这个session会以合适的方式提交或回滚。
一旦事务创建之后，MyBatis-Spring将会透明的管理事务。在你的DAO类中就不需要额外的代码了。

====================================标准配置==================================
要开启Spring的事务处理，在Spring的XML配置文件中简单的创建一个DataSourceTransactionManager 对象。

<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  <property name="dataSource" ref="dataSource" />
</bean>

指定的DataSource一般可以是你使用Spring任意JDBC DataSource。这包含了连接池和通过JNDI查找获得的DataSource。
要注意，为事务管理器指定的DataSource必须要和用来创建SqlSessionFactoryBean的是同一个数据源，否则事物管理器就无法工作了。


======================================容器管理事务====================================
如果你正在使用一个JEE容器而且想让Spring参与到容器管理事务（Container managed transactions,CMT），那么Spring应该使用JtaTransactionManager或它的
容器指定的子类来配置。做这件事情的最方便的方式是用Spring的事务命名空间：

<tx:jta-transaction-manager />

在这种配置中，MyBatis将会和其它由CMT配置的Spring事务资源一样。Spring会自动使用任意存在的容器事务，在上面附加一个SqlSession。如果没有开始事务，或者需要基于事务配置，Spring会开启一个新的容器管理事务。
注意：如果你想使用CMT，而不是使用Spring的事务管理，你必须配置SqlSessionFactoryBean来使用基本的MyBatis的ManagedTransactionFactory
而不是其它任意的Spring事物管理器：

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="transactionFactory">
    <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
  </property>  
</bean>


=================================编程式事务管理===================================
MyBatis的SqlSession提供指定的方法来处理编程式的事务。但是当使用MyBatis-Spring时，bean将会使用Spring管理的SqlSession或者映射器来注入。
也就是说Spring通常是处理事务的。

你不能在Spring管理的SqlSession上调用SqlSession.commit(),SqlSession.rollback()或 SqlSession.close() 方 法 。
如果这样做了就 会 抛 出 UnsupportedOperationException 异常。注意在使用注入的映射器（应该指的是被spring管理的类）时不能访问那些方法。

无论JDBC连接是否设置为自动提交，SqlSession数据方法的执行或在Spring事务之外任意调用映射器方法都将会自动被提交。
如果想编程式的控制事务，请参考 Spring 手册的 10.6 节。这段代码展示了如何手动 使用在 10.6.2 章节描述的 PlatformTransactionManager 来处理事务。

DefaultTransactionDefinition def = new DefaultTransactionDefinition();
def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

TransactionStatus status = txManager.getTransaction(def);
try {
  userMapper.insertUser(user);
}
catch (MyException ex) {
  txManager.rollback(status);
  throw ex;
}
txManager.commit(status);

注意这段代码展示了一个映射器,但它也能和 SqlSession 一起使用。

















